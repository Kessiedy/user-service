package com.userservice;

import com.userservice.entity.User;
import com.userservice.exception.UserAlreadyExistsException;
import com.userservice.exception.UserNotFoundException;
import com.userservice.exception.ValidationException;
import com.userservice.service.UserService;
import com.userservice.service.UserServiceImpl;
import com.userservice.util.HibernateUtil;

import java.util.InputMismatchException;
import java.util.List;
import java.util.Scanner;


public class Main {

    public static final UserService userService = new UserServiceImpl();
    public static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        System.out.println("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        System.out.println("‚ïë     –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò      ‚ïë");
        System.out.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
        System.out.println();

        boolean running = true;

        while (running) {
            try {
                showMenu();
                int choice = getUserChoice();

                switch (choice) {
                    case 1:
                        createUser();
                        break;
                    case 2:
                        showAllUsers();
                        break;
                    case 3:
                        findUserById();
                        break;
                    case 4:
                        findUserByEmail();
                        break;
                    case 5:
                        updateUser();
                        break;
                    case 6:
                        deleteUser();
                        break;
                    case 7:
                        showUserCount();
                        break;
                    case 8:
                        deleteAllUsers();
                        break;
                    case 0:
                        running = false;
                        System.out.println("\nüëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!");
                        break;
                    default:
                        System.out.println("\nX –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                }
                if (running && choice != 0) {
                    System.out.println("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...");
                    scanner.nextLine();
                }
            } catch (Exception e) {
                System.err.println("\nX –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: " + e.getMessage());
                scanner.nextLine();
            }
        }
        scanner.close();
        HibernateUtil.shutdown();
    }

    private static void showMenu() {
        System.out.println("\n" + "=".repeat(50));
        System.out.println("                 –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ");
        System.out.println("=".repeat(50));
        System.out.println("1. ‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        System.out.println("2. üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
        System.out.println("3. üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID");
        System.out.println("4. üìß –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Email");
        System.out.println("5. ‚úèÔ∏è  –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        System.out.println("6. üóëÔ∏è  –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        System.out.println("7. üìä –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
        System.out.println("8. ‚ö†Ô∏è  –£–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
        System.out.println("0. üö™ –í—ã—Ö–æ–¥");
        System.out.println("=".repeat(50));
        System.out.print("–í–∞—à –≤—ã–±–æ—Ä: ");
    }

    private static int getUserChoice() {
        try {
            int choice = scanner.nextInt();
            scanner.nextLine();
            return choice;
        } catch (InputMismatchException e) {
            scanner.nextLine();
            return -1;
        }
    }

    public static void createUser() {
        System.out.println("\n" + "‚îÄ".repeat(50));
        System.out.println("         –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø");
        System.out.println("‚îÄ".repeat(50));

        try {
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ");
            String name = scanner.nextLine();

            System.out.print("–í–≤–µ–¥–∏—Ç–µ email: ");
            String email = scanner.nextLine();

            System.out.print("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º): ");
            String ageInput = scanner.nextLine();
            Integer age = null;

            if (!ageInput.trim().isEmpty()) {
                try {
                    age = Integer.parseInt(ageInput);
                } catch (NumberFormatException e) {
                    System.out.println("‚ö†Ô∏è  –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç. –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ NULL.");

                }

            }

            User user = userService.createUser(name, email, age);
            System.out.println("\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!");
            printUserDetails(user);
        } catch (ValidationException e) {
            System.out.println("\n–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: " + e.getMessage());
        } catch (UserAlreadyExistsException e) {
            System.out.println("\nX" + e.getMessage());
        } catch (Exception e) {
            System.out.println("\n–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + e.getMessage());
        }
    }

    private static void showAllUsers() {
        System.out.println("\n" + "‚îÄ".repeat(50));
        System.out.println("            –°–ü–ò–°–û–ö –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô");
        System.out.println("‚îÄ".repeat(50));

        try {
            List<User> users = userService.getAllUsers();

            if (users.isEmpty()) {
                System.out.println("\n–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.");
            } else {
                System.out.println("\n–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + users.size());
                System.out.println();
                printUsersTable(users);
            }
        } catch (Exception e) {
            System.out.println("\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: " + e.getMessage());
        }
    }

    private static void findUserById() {
        System.out.println("\n" + "‚îÄ".repeat(50));
        System.out.println("           –ü–û–ò–°–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ü–û ID");
        System.out.println("‚îÄ".repeat(50));

        try {
            System.out.print("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ");
            Long id = scanner.nextLong();
            scanner.nextLine();

            User user = userService.getUserById(id);

            System.out.println("\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω!");
            printUserDetails(user);
        } catch (InputMismatchException e) {
            scanner.nextLine();
            System.out.println("\nID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º");
        } catch (UserNotFoundException e) {
            System.out.println("\nX " + e.getMessage());
        } catch (Exception e) {
            System.out.println("\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: " + e.getMessage());
        }
    }

    private static void findUserByEmail() {
        System.out.println("\n" + "‚îÄ".repeat(50));
        System.out.println("          –ü–û–ò–°–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ü–û EMAIL");
        System.out.println("‚îÄ".repeat(50));

        try {
            System.out.print("–í–≤–µ–¥–∏—Ç–µ email: ");
            String email = scanner.nextLine();

            User user = userService.getUserByEmail(email);
            System.out.println("\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω!");
            printUserDetails(user);
        } catch (UserNotFoundException e) {
            System.out.println("\nx " + e.getMessage());
        } catch (Exception e) {
            System.out.println("\nx –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: " + e.getMessage());
        }
    }

    private static void updateUser() {
        System.out.println("\n" + "‚îÄ".repeat(50));
        System.out.println("           –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø");
        System.out.println("‚îÄ".repeat(50));

        try {
            System.out.print("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ");
            Long id = scanner.nextLong();

            User currentUser = userService.getUserById(id);
            System.out.println("\n–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:");
            printUserDetails(currentUser);

            System.out.println("\n–û—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –∏–∑–º–µ–Ω—è—Ç—å.");
            System.out.print("–ù–æ–≤–æ–µ –∏–º—è [" + currentUser.getName() + "]: ");
            String name = scanner.nextLine();

            System.out.print("–ù–æ–≤—ã–π email [" + currentUser.getEmail() + "]: ");
            String email = scanner.nextLine();

            System.out.print("–ù–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç [" + currentUser.getAge() + "]: ");
            String ageInput = scanner.nextLine();
            Integer age = null;

            if (!ageInput.trim().isEmpty()) {
                try {
                    age = Integer.parseInt(ageInput);
                } catch (NumberFormatException e) {
                    System.out.println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç. –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–æ.");

                }
            }
            User updatedUser = userService.updateUser(
                    id,
                    name.isEmpty() ? null : name,
                    email.isEmpty() ? null : email,
                    age
            );

            System.out.println("\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!");
            printUserDetails(updatedUser);

        } catch (InputMismatchException e) {
            scanner.nextLine();
            System.out.println("\nID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!");
        } catch (ValidationException e) {
            System.out.println("\n–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: " + e.getMessage());
        } catch (UserNotFoundException e) {
            System.out.println("\n" + e.getMessage());
        } catch (UserAlreadyExistsException e) {
            System.out.println("\n " + e.getMessage());
        } catch (Exception e) {
            System.out.println("\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: " + e.getMessage());
        }
    }

    private static void deleteUser() {
        System.out.println("\n" + "‚îÄ".repeat(50));
        System.out.println("            –£–î–ê–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø");
        System.out.println("‚îÄ".repeat(50));

        try {
            System.out.println("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ");
            Long id = scanner.nextLong();
            scanner.nextLine();

            User user = userService.getUserById(id);
            System.out.println("\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:");
            printUserDetails(user);

            System.out.println("\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? (–¥–∞/–Ω–µ—Ç): ");
            String confirmation = scanner.nextLine();

            if (confirmation.equalsIgnoreCase("–¥–∞") || confirmation.equalsIgnoreCase("yes")) {
                userService.deleteUser(id);
                System.out.println("\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!");
            } else {
                System.out.println("\n–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
            }
        } catch (InputMismatchException e) {
            scanner.nextLine();
            System.out.println("\n ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!");
        } catch (UserNotFoundException e) {
            System.out.println("\n " + e.getMessage());
        } catch (Exception e) {
            System.out.println("\n–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: " + e.getMessage());
        }
    }

    private static void showUserCount() {
        System.out.println("\n" + "‚îÄ".repeat(50));
        System.out.println("         –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô");
        System.out.println("‚îÄ".repeat(50));

        try {
            long count = userService.getUserCount();
            System.out.println("–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: \" + count");
        } catch (Exception e) {
            System.out.println("\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: " + e.getMessage());
        }
    }

    private static void deleteAllUsers() {
        System.out.println("\n" + "‚îÄ".repeat(50));
        System.out.println("        !!–£–î–ê–õ–ï–ù–ò–ï –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô!! ");
        System.out.println("‚îÄ".repeat(50));

        try {
            long count = userService.getUserCount();

            if (count == 0) {
                System.out.println("\n–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –ø—É—Å—Ç–∞.");
                return;
            }

            System.out.println("\n–í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–∏—Ç –í–°–ï " + count + " –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!");
            System.out.print("–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í–≤–µ–¥–∏—Ç–µ '–£–î–ê–õ–ò–¢–¨ –í–°–Å' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ");
            String confirmation = scanner.nextLine();

            if (confirmation.equals("–£–î–ê–õ–ò–¢–¨ –í–°–Å")) {
                userService.deleteAllUsers();
                System.out.println("\n –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!");
            } else {
                System.out.println("\n–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
            }
        } catch (Exception e) {
            System.out.println("\n–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: " + e.getMessage());
        }
    }

    private static void printUserDetails(User user) {
        System.out.println("\n‚îå" + "‚îÄ".repeat(48) + "‚îê");
        System.out.println("‚îÇ ID:         " + String.format("%-34s", user.getId()) + "‚îÇ");
        System.out.println("‚îÇ –ò–º—è:        " + String.format("%-34s", user.getName()) + "‚îÇ");
        System.out.println("‚îÇ Email:      " + String.format("%-34s", user.getEmail()) + "‚îÇ");
        System.out.println("‚îÇ –í–æ–∑—Ä–∞—Å—Ç:    " + String.format("%-34s", user.getAge() != null ? user.getAge() : "–Ω–µ —É–∫–∞–∑–∞–Ω") + "‚îÇ");
        System.out.println("‚îÇ –°–æ–∑–¥–∞–Ω:     " + String.format("%-34s", user.getCreatedAt()) + "‚îÇ");
        System.out.println("‚îî" + "‚îÄ".repeat(48) + "‚îò");
    }

    private static void printUsersTable(List<User> users) {
        System.out.println("‚îå" + "‚îÄ".repeat(6) + "‚î¨" + "‚îÄ".repeat(25) + "‚î¨" + "‚îÄ".repeat(30) + "‚î¨" + "‚îÄ".repeat(10) + "‚îê");
        System.out.println("‚îÇ " + String.format("%-4s", "ID") +
                " ‚îÇ " + String.format("%-23s", "–ò–º—è") +
                " ‚îÇ " + String.format("%-28s", "Email") +
                " ‚îÇ " + String.format("%-8s", "–í–æ–∑—Ä–∞—Å—Ç") + " ‚îÇ");
        System.out.println("‚îú" + "‚îÄ".repeat(6) + "‚îº" + "‚îÄ".repeat(25) + "‚îº" + "‚îÄ".repeat(30) + "‚îº" + "‚îÄ".repeat(10) + "‚î§");

        for (User user : users){
            String id = String.valueOf(user.getId());
            String name = truncate(user.getName(), 23);
            String email = truncate(user.getEmail(), 28);
            String age = user.getAge() != null ? String.valueOf(user.getAge()) : "-";

            System.out.println("‚îÇ " + String.format("%-4s", id) +
                    " ‚îÇ " + String.format("%-23s", name) +
                    " ‚îÇ " + String.format("%-28s", email) +
                    " ‚îÇ " + String.format("%-8s", age) + " ‚îÇ");
        }

        System.out.println("‚îî" + "‚îÄ".repeat(6) + "‚î¥" + "‚îÄ".repeat(25) + "‚î¥" + "‚îÄ".repeat(30) + "‚î¥" + "‚îÄ".repeat(10) + "‚îò");
    }

    private static String truncate(String str, int maxLength){
        if (str == null){
            return "";
        }
        if (str.length() <= maxLength){
            return str;
        }
        return str.substring(0, maxLength - 3) + "...";
    }
}